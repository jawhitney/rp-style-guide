//== Name: Metrics
//== Description: Defines metrics styles

.rp-metric-nav {
    $item-count: 8;
    $circle-size: 8 * $rp-spacing;
    $item-size: $rp-spacing;
    $offset: 45;

    margin: 0 auto;
    position: relative;
    width: $circle-size;
    height: $circle-size;
    padding: 0;
    border-radius: 50%;

    .rp-metric-bg-circle,
    .rp-metric-bg-email,
    .rp-metric-circles,
    .rp-metric-circle,
    .rp-metric-circle > span,
    .rp-metric-lines,
    .rp-metric-titles,
    .rp-metrics {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }

    .rp-metric-bg-circle {
        z-index: 0;
        background-image: url($assets-path + 'images/backgrounds/background-metrics-nav-green-circle.svg');
    }

    .rp-metric-circles { z-index: 1; }
    .rp-metric-bg-email {
        z-index: 2;
        background-image: url($assets-path + 'images/backgrounds/background-metrics-nav-email.svg');
    }

    .rp-metric-lines { z-index: 3; }
    .rp-metric-titles { z-index: 4; }
    .rp-metrics { z-index: 5; }

    .rp-metric-line,
    .rp-metric,
    .rp-metric-title {
        position: absolute;
        top: 50%;
        left: 50%;
    }

    .rp-metric-bg-circle,
    .rp-metric-bg-email {
        background-position: center center, center center;
        background-repeat: no-repeat, no-repeat;
        background-size: 95%, 95%;
    }

    .rp-metric-circle {
        opacity: 0;

        $angle: (360 / $item-count);
        $rot: $offset;

        @for $i from 1 through $item-count {
            &:nth-child(#{$i}) {
                transform: rotate($rot * 1deg);
            }

            $rot: $rot + $angle;
        }

        > span {
            border: 2.5 * $border-radius solid transparent;
            border-radius: 50%;
            transform: scale(0);
        }

        &.active {
            opacity: 1;

            > span {
                border-color: transparent $rp-green-light transparent transparent;

                $count: 3;
                $time: 7.5 * $rp-timing;

                @for $i from 1 through $count {
                    &:nth-child(#{$i}) {
                        animation: rpMetricCircle $time linear infinite (($i - 1) / $count) * $time;
                    }
                }
            }
        }
    }

    .rp-metric-line {
        width: $circle-size / 6;
        height: 5px;

        $angle: (360 / $item-count);
        $rot: $offset;

        @for $i from 1 through $item-count {
            &:nth-child(#{$i}) {
                transform-origin: left center;
                transform: rotate($rot * 1deg) translate($circle-size / 4);
            }

            $rot: $rot + $angle;
        }

        li {
            display: inline-block;
            margin-right: (1 / 3) * 40%;
            width: 15%;
            height: 5px;
            line-height: 5px;
            vertical-align: top;
            background-color: $white;

            &:last-child {
                margin-right: 0;
            }
        }

        &.active {
            @each $metric, $color in $rp-metric-colors {
                &.rp-metric-#{$metric} {
                    li {
                        $count: 4;
                        $time: .5s;

                        @for $i from 1 through $count {
                            &:nth-child(#{$i}) {
                                animation: rpMetricLine-#{$metric} 2 * $time ease-in-out infinite (($i - 1) / $count) * $time;
                            }
                        }
                    }
                }
            }
        }
    }

    .rp-metric {
        margin: -($item-size / 2);
        width: $item-size;
        height: $item-size;
        background-color: $rp-navy-dark;
        border-radius: 50%;
        transition: background-color $rp-timing $rp-timing-function;

        $angle: (360 / $item-count);
        $rot: $offset;
        $time: 2s;

        @for $i from 1 through $item-count {
            &:nth-child(#{$i}) {
                transform: rotate($rot * 1deg) translate($circle-size / 2) rotate($rot * -1deg);

                a {
                    animation: rpMetricIconBorder $time ease-in-out infinite (($i - 1) / $item-count) * 4 * $time;
                }
            }

            $rot: $rot + $angle;
        }

        a {
            width: 100%;
            height: 100%;
            border: $border-radius solid $rp-navy-light;
            border-radius: 50%;
        }

        i {
            @include v-h-align();
            font-size: .5 * $rp-spacing;
            line-height: .5 * $rp-spacing;
            transition: color $rp-timing $rp-timing-function;
            z-index: -1;
        }

        @each $metric, $color in $rp-metric-colors {
            &.rp-metric-#{$metric} {
                i {
                    color: $color;
                }
            }
        }

        &.active {
            @each $metric, $color in $rp-metric-colors {
                &.rp-metric-#{$metric} {
                    background-color: $color;
                    animation: none;

                    a {
                        border-color: $white $white $white $color;
                        animation: rpMetricBorder 1s linear infinite;
                    }
                }
            }

            i {
                color: $white;
            }
        }
    }

    &.active {
        .rp-metric a {
            animation: none;
        }
    }

    .rp-metric-title {
        $w: 3 * $item-size;
        $h: 3 * $item-size;
        $angle: (360 / $item-count);
        $rot: $offset;

        margin: (-.5 * $h) (-.5 * $w);
        width: $w;
        height: $h;

        > span {
            margin-top: 2.25 * $item-size;
            opacity: 0;
            transition: opacity $rp-timing $rp-timing-function;
            text-shadow: 2px 2px $rp-green-dark;
        }

        @for $i from 1 through $item-count {
            &:nth-child(#{$i}) {
                transform: rotate($rot * 1deg) translate($circle-size / 2) rotate($rot * -1deg);
            }

            $rot: $rot + $angle;
        }

        &.active {
            > span {
                opacity: 1;
            }
        }
    }
}

.rp-metric-nav-mobile {
    span {
        transition: color $rp-timing $rp-timing-function, border-color $rp-timing $rp-timing-function;

        &:nth-of-type(1) {
            width: $rp-spacing;
            height: $rp-spacing;
            background-color: $rp-navy-dark;
            border: $border-radius solid $rp-navy-light;
            border-radius: 50%;
            font-size: .5 * $rp-spacing;
            line-height: .5 * $rp-spacing;
        }

        &:nth-of-type(2) {
            margin: .125 * $rp-spacing;
            color: $white;
            font-size: $rp-font-size-xs;
        }
    }

    i {
        transition: color $rp-timing $rp-timing-function;
    }

    .rp-metric {
        @each $metric, $color in $rp-metric-colors {
            &.rp-metric-#{$metric} {
                i {
                    color: $color;
                }
            }
        }

        &:hover {
            span {
                &:nth-of-type(1) {
                    border: $border-radius solid $white;
                    color: $white;
                }

                &:nth-of-type(2) {
                    color: $white;
                }
            }

            i {
                color: $white;
            }

            @each $metric, $color in $rp-metric-colors {
                &.rp-metric-#{$metric} {
                    span {
                        &:nth-of-type(1) {
                            background-color: $color;
                            color: $color;
                        }
                    }
                }
            }
        }
    }
}

.rp-metric-graph {
    @each $metric, $color in $rp-metric-colors {
        &.rp-metric-graph-#{$metric} {
            h3 {
                color: $color;

                > span {
                    background-color: $color;
                }
            }
        }
    }

    h3 > span {
        width: $rp-spacing;
        height: $rp-spacing;
        border-radius: 50%;

        i {
            color: $white;
        }
    }
}

.rp-metric-graph-legend {
    .rp-legend-text {
        i {
            font-size: .75 * $rp-spacing;
            line-height: .75 * $rp-spacing;
        }
    }
}
